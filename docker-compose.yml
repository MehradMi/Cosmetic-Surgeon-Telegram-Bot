services:
  # Telegram Bot Service
  telegram-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cosmetic_bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-fallback_secret_key_for_bot}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme}
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
    volumes:
      # Mount the actual files and directories
      - ./:/app/source:ro
      - ./data:/app/data
      - ./static:/app/static
      - ./logs:/app/logs
    working_dir: /app
    command: python source/new_main.py
    restart: unless-stopped
    networks:
      - bot-network

  # Dashboard Service  
  dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cosmetic_dashboard
    environment:
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-please_set_this_in_env_file}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-please_change_this}
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
    ports:
      - "${DASHBOARD_PORT:-5000}:5000"
    volumes:
      # Mount the actual files and directories  
      - ./:/app/source:ro
      - ./data:/app/data
      - ./static:/app/static
      - ./templates:/app/templates
      - ./logs:/app/logs
    working_dir: /app
    command: python source/secure_dashboard.py
    restart: unless-stopped
    networks:
      - bot-network

networks:
  bot-network:
    driver: bridge